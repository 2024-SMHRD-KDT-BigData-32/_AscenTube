// src/pages/Contents.jsx

import React, { useEffect, useState, useMemo } from 'react';
import PageLayout from '../layouts/PageLayout'; // Í≥µÌÜµ Î†àÏù¥ÏïÑÏõÉ import
import '../styles/pages/Contents.css'; // Contents ÌéòÏù¥ÏßÄ Ï†ÑÏö© CSS
import { Chart as ChartJS, CategoryScale, LinearScale, LogarithmicScale, BarElement, Title, Tooltip, Legend } from 'chart.js';
import { Bar } from 'react-chartjs-2';
import { fetchContentsPageData } from '../api/contentsApi';

// Chart.jsÏóêÏÑú ÏÇ¨Ïö©Ìï† ÏöîÏÜå Îì±Î°ù (LogarithmicScale Ï∂îÍ∞Ä)
ChartJS.register(CategoryScale, LinearScale, LogarithmicScale, BarElement, Title, Tooltip, Legend);

// ============================================
// üü¶ ÏÉÅÏàò Î∞è Ïû¨ÏÇ¨Ïö© Ïª¥Ìè¨ÎÑåÌä∏
// ============================================
const barColorDay = "#A78BFA"; // ÏöîÏùºÎ≥Ñ Ï∞®Ìä∏ ÏÉâÏÉÅ Ï∂îÍ∞Ä
const barColorTime = "#7A7CFF";
const barColorLen = "#1EE3CF";
const trafficColors = ['#a78bfa', '#facc15', '#f87171', '#64748b', '#38bdf8', '#818cf8', '#f472b6'];
const deviceColors = ['#38bdf8', '#f43f5e', '#fcd34d', '#a3e635'];

// --- Í∞ÄÎ°ú ÎßâÎåÄÎ∞î Ïª¥Ìè¨ÎÑåÌä∏ ---
const ContentsMultiThinBarList = ({ labels, values, percents, colors, unit }) => (
    <div className="contents-multi-thin-bar-list">
        {(labels || []).map((label, i) => (
            <div className="contents-multi-thin-bar-row" key={label || `item-${i}`}>
                <span className="contents-multi-bar-label">{label}</span>
                <div className="contents-multi-bar-track">
                    <div className="contents-multi-bar-fill" style={{ width: `${percents?.[i] || 0}%`, background: colors?.[i] || '#ccc' }}>
                        {(percents?.[i] || 0) > 15 && (
                            <span className="bar-inner-text">{`${(values?.[i] || 0).toLocaleString()}${unit}`}</span>
                        )}
                    </div>
                </div>
                <span className="contents-multi-bar-value">
                    {`${(percents?.[i] || 0).toFixed(1)}%`}
                </span>
            </div>
        ))}
    </div>
);

// --- Ïä§ÌÉù ÎßâÎåÄÎ∞î Î∞è Î¶¨Ïä§Ìä∏ Ïª¥Ìè¨ÎÑåÌä∏ ---
const StackedBarSection = ({ title, data, colors, unit }) => (
    <section className="page-section">
        <h2>{title}</h2>
        {data.labels.length > 0 ? (
            <>
                <div className="contents-stacked-bar-track" title={data.labels.map((l, i) => `${l}: ${data.percents[i].toFixed(1)}%`).join('\n')}>
                    {(data.percents || []).map((percent, i) => (
                        // ‚ú®‚ú®‚ú® Ïä§ÌÉù Î∞îÏùò Í∞Å ÏÑ∏Í∑∏Î®ºÌä∏Í∞Ä 100%Î•º Ï±ÑÏö∞ÎèÑÎ°ù ÎÑàÎπÑÎ•º Ï°∞Ï†ï ‚ú®‚ú®‚ú®
                        <div key={i} className="contents-stacked-bar-fill" style={{ width: `${percent}%`, background: colors[i] }}>
                            {percent > 10 && <span>{`${percent.toFixed(0)}%`}</span>}
                        </div>
                    ))}
                </div>
                <ul className="contents-bar-value-list">
                    {(data.labels || []).map((label, i) => (
                        <li key={label}>
                            <span className="contents-bar-value-dot" style={{ background: colors[i] }} />
                            <span className="contents-bar-value-label">{label}</span>
                            <span className="contents-bar-value-val">
                                {`${(data.values?.[i] || 0).toLocaleString()}${unit}`}
                            </span>
                        </li>
                    ))}
                </ul>
            </>
        ) : <p className="no-data-message">Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå</p>}
    </section>
);

// ‚ú®‚ú®‚ú® ÏóêÎü¨ Ìï¥Í≤∞: to2line Ìï®Ïàò Ï∂îÍ∞Ä ‚ú®‚ú®‚ú®
function to2line(label) {
    if (!label) return '';
    // Ïù¥Ï†ÑÏóê 15ÏûêÎ°ú Ï†úÌïúÌñàÏóàÏßÄÎßå, ÌÖåÏù¥Î∏î ÏÖÄÏóê ÎßûÍ≤å Îçî ÏßßÍ≤å (Ïòà: 25Ïûê) ÎòêÎäî CSSÎ°ú Ï≤òÎ¶¨ÌïòÎäî Í≤ÉÏù¥ Ï¢ãÏäµÎãàÎã§.
    // Ïó¨Í∏∞ÏÑúÎäî ÏòàÏãúÎ°ú 25ÏûêÎ°ú ÎäòÎ†§Î¥ÖÎãàÎã§. ÌïÑÏöîÏóê Îî∞Îùº Ï°∞Ï†àÌïòÏÑ∏Ïöî.
    return label.length > 25 ? `${label.slice(0, 25)}...` : label; // Ï§ÑÎ∞îÍøà ÎåÄÏã† ... Ï≤òÎ¶¨
}

function formatShortDate(dateStr) {
    if (!dateStr) return '--';
    try {
        const date = new Date(dateStr);
        if (isNaN(date.getTime())) return dateStr;
        const year = date.getFullYear().toString().slice(2);
        const month = (date.getMonth() + 1).toString().padStart(2, '0');
        const day = date.getDate().toString().padStart(2, '0');
        return `${year}-${month}-${day}`;
    } catch (e) { return dateStr; }
}

// ============================================
// üü¶ Î©îÏù∏ Ïª¥Ìè¨ÎÑåÌä∏
// ============================================
const Contents = () => {
    const [allVideos, setAllVideos] = useState([]);
    const [statistics, setStatistics] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    // ‚ú®‚ú®‚ú® ÏãúÍ∞ÑÎåÄÎ≥Ñ ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞ Ïû¨Ï†ïÏùò (ÏÉàÎ≤Ω, Ïò§Ï†Ñ, Ïò§ÌõÑ Î∂ÑÎ•ò) ‚ú®‚ú®‚ú®
    const dummyHourlyData = useMemo(() => {
        const rawData = [
            { hour: 0, views: 120 }, { hour: 1, views: 90 }, { hour: 2, views: 70 },
            { hour: 3, views: 50 }, { hour: 4, views: 60 }, { hour: 5, views: 100 },
            { hour: 6, views: 180 }, { hour: 7, views: 300 }, { hour: 8, views: 500 },
            { hour: 9, views: 700 }, { hour: 10, views: 900 }, { hour: 11, views: 1200 },
            { hour: 12, views: 1500 }, { hour: 13, views: 1400 }, { hour: 14, views: 1300 },
            { hour: 15, views: 1250 }, { hour: 16, views: 1100 }, { hour: 17, views: 1000 },
            { hour: 18, views: 950 }, { hour: 19, views: 900 }, { hour: 20, views: 800 },
            { hour: 21, views: 750 }, { hour: 22, views: 600 }, { hour: 23, views: 300 },
        ];

        let dawnViews = 0; // ÏÉàÎ≤Ω: 0Ïãú ~ 5Ïãú
        let morningViews = 0; // Ïò§Ï†Ñ: 6Ïãú ~ 11Ïãú
        let afternoonViews = 0; // Ïò§ÌõÑ: 12Ïãú ~ 23Ïãú

        rawData.forEach(item => {
            if (item.hour >= 0 && item.hour <= 5) {
                dawnViews += item.views;
            } else if (item.hour >= 6 && item.hour <= 11) {
                morningViews += item.views;
            } else if (item.hour >= 12 && item.hour <= 23) {
                afternoonViews += item.views;
            }
        });

        // Í∑∏ÎûòÌîÑÎ•º ÏúÑÌïú ÌòïÏãùÏúºÎ°ú Î≥ÄÌôò
        return [
            { segment: 'ÏÉàÎ≤Ω', views: dawnViews },
            { segment: 'Ïò§Ï†Ñ', views: morningViews },
            { segment: 'Ïò§ÌõÑ', views: afternoonViews },
        ];
    }, []);

    // ‚ú®‚ú®‚ú® Ïú†ÏûÖÍ≤ΩÎ°ú ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞ Ï∂îÍ∞Ä (Ï¥ùÌï©Ïù¥ 100Ïù¥ ÎêòÎèÑÎ°ù Ï°∞Ï†ï) ‚ú®‚ú®‚ú®
    const dummyTrafficData = useMemo(() => {
        const data = {
            'YT_SEARCH': 35000,
            'RELATED_VIDEO': 25000,
            'SUBSCRIBER': 15000,
            'YT_CHANNEL': 10000,
            'EXT_URL': 8000,
            'NO_LINK_OTHER': 7000
        };
        const total = Object.values(data).reduce((sum, v) => sum + v, 0);
        const labels = Object.keys(data);
        const values = Object.values(data);
        // ÎπÑÏú®Ïùò Ï¥ùÌï©Ïù¥ 100%Í∞Ä ÎêòÎèÑÎ°ù Ï†ïÌôïÌïòÍ≤å Í≥ÑÏÇ∞
        const percents = values.map(v => (v / total) * 100);

        return { labels, values, percents };
    }, []);


    useEffect(() => {
        const loadData = async () => {
            setLoading(true);
            setError(null);
            try {
                const { allVideos: fetchedVideos = [], statistics: fetchedStats = null } = await fetchContentsPageData();
                setAllVideos(fetchedVideos);

                if (fetchedStats) {
                    setStatistics({
                        ...fetchedStats,
                        uploadCountByTimeZone: dummyHourlyData, // ÎçîÎØ∏ ÏãúÍ∞ÑÎåÄÎ≥Ñ Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©
                        viewsByTrafficSource: dummyTrafficData, // ÎçîÎØ∏ Ïú†ÏûÖÍ≤ΩÎ°ú Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©
                    });
                } else {
                    setStatistics({
                        uploadCountByTimeZone: dummyHourlyData,
                        viewsByTrafficSource: dummyTrafficData,
                        uploadCountByDay: {},
                        avgViewsByLength: [],
                        viewsByDevice: { labels: [], values: [], percents: [] },
                    });
                }

            } catch (err) {
                setError("Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§Îäî Îç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.");
                setStatistics(prevStats => ({
                    ...prevStats,
                    uploadCountByTimeZone: dummyHourlyData,
                    viewsByTrafficSource: dummyTrafficData,
                    uploadCountByDay: {},
                    avgViewsByLength: [],
                    viewsByDevice: { labels: [], values: [], percents: [] },
                }));
            } finally {
                setLoading(false);
            }
        };
        loadData();
    }, [dummyHourlyData, dummyTrafficData]); // ÏùòÏ°¥ÏÑ± Ï∂îÍ∞Ä

    // --- Îç∞Ïù¥ÌÑ∞ Í∞ÄÍ≥µ Î°úÏßÅ (useMemo ÏÇ¨Ïö©) ---
    // ‚ú®‚ú®‚ú® ÏãúÍ∞ÑÎåÄÎ≥Ñ Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨ Ìï®Ïàò ÏàòÏ†ï: 'segment' Í∏∞Ï§ÄÏúºÎ°ú Ï≤òÎ¶¨ ‚ú®‚ú®‚ú®
    const processHourlyData = (statArray) => {
        if (!Array.isArray(statArray) || statArray.length === 0) return { labels: [], values: [], percents: [] };
        const labels = statArray.map(item => item.segment);
        const values = statArray.map(item => item.views || 0);
        const total = values.reduce((sum, v) => sum + v, 0) || 1;
        const percents = values.map(v => (v / total) * 100);
        return { labels, values, percents };
    };

    const processStatData = (statObject, order) => {
        if (!statObject || typeof statObject !== 'object' || Object.keys(statObject).length === 0) {
            return { labels: [], values: [], percents: [] };
        }
        const labels = order ? order.filter(day => statObject[day] !== undefined) : Object.keys(statObject);
        const values = labels.map(label => statObject[label]);
        const total = values.reduce((sum, v) => sum + v, 0) || 1;
        const percents = values.map(v => (v / total) * 100);
        return { labels, values, percents };
    };
    
    const processLengthData = (statArray) => {
        if (!Array.isArray(statArray) || statArray.length === 0) return { labels: [], values: [], percents: [] };
        const labels = statArray.map(item => item.lengthSegment || 'N/A');
        const values = statArray.map(item => item.viewsCount || 0);
        const total = values.reduce((sum, v) => sum + v, 0) || 1;
        const percents = values.map(v => (v / total) * 100);
        return { labels, values, percents };
    };

    const dayOrder = ["ÏõîÏöîÏùº", "ÌôîÏöîÏùº", "ÏàòÏöîÏùº", "Î™©ÏöîÏùº", "Í∏àÏöîÏùº", "ÌÜ†ÏöîÏùº", "ÏùºÏöîÏùº"];
    const dayOfWeekData = useMemo(() => processStatData(statistics?.uploadCountByDay || {}, dayOrder), [statistics]);
    const timeZoneData = useMemo(() => processHourlyData(statistics?.uploadCountByTimeZone || []), [statistics]);
    const lengthData = useMemo(() => processLengthData(statistics?.avgViewsByLength || []), [statistics]);
    
    const { trafficData, deviceData } = useMemo(() => {
        const translateTraffic = (label) => ({'NO_LINK_OTHER':'Í∏∞ÌÉÄ','SUBSCRIBER':'Íµ¨ÎèÖ','YT_CHANNEL':'Ï±ÑÎÑê','YT_SEARCH':'Í≤ÄÏÉâ','RELATED_VIDEO':'Í¥ÄÎ†®ÏòÅÏÉÅ','YT_OTHER_PAGE':'Í∏∞ÌÉÄ Ïú†ÌäúÎ∏å','EXT_URL':'Ïô∏Î∂ÄURL','PLAYLIST':'Ïû¨ÏÉùÎ™©Î°ù','NOTIFICATION':'ÏïåÎ¶º','SHORTS':'ÏáºÏ∏†'}[label] || label);
        const translateDevice = (label) => ({'DESKTOP':'PC','TV':'TV','MOBILE':'Î™®Î∞îÏùº','TABLET':'ÌÉúÎ∏îÎ¶ø'}[label] || label);
        
        // ‚ú®‚ú®‚ú® statisticsÏóêÏÑú Í∞ÄÏ†∏Ïò® traffic Îç∞Ïù¥ÌÑ∞Îäî Ïù¥Ï†ú dummyTrafficDataÎ°ú ÎåÄÏ≤¥Îê† Í≤ÉÏù¥ÎØÄÎ°ú ÏßÅÏ†ë ÏÇ¨Ïö© ‚ú®‚ú®‚ú®
        const rawTraffic = statistics?.viewsByTrafficSource || { labels: [], values: [], percents: [] };
        const rawDevice = statistics?.viewsByDevice || { labels: [], values: [], percents: [] };

        return {
            trafficData: { labels: (rawTraffic.labels || []).map(translateTraffic), values: rawTraffic.values, percents: rawTraffic.percents },
            deviceData: { labels: (rawDevice.labels || []).map(translateDevice), values: rawDevice.values, percents: rawDevice.percents }
        };
    }, [statistics]);

    const top5PopularVideosForChart = useMemo(() => [...(allVideos || [])].sort((a, b) => (b.views || 0) - (a.views || 0)).slice(0, 5), [allVideos]);
    const videoLists = useMemo(() => ({
        latest: [...(allVideos || [])].sort((a, b) => new Date(b.uploadDate) - new Date(a.uploadDate)).slice(0, 5),
        popular: [...(allVideos || [])].sort((a, b) => (b.likes || 0) - (a.likes || 0)).slice(0, 5)
    }), [allVideos]);

    const renderVideoRow = (v, i) => (
        <tr key={v.videoId || i}>
            <td><img src={v.thumb || ''} alt="" className="contents-video-thumb-img" /></td>
            {/* ‚ú®‚ú®‚ú® to2line Ìï®ÏàòÎ•º Ï†ÅÏö©ÌïòÏó¨ Ï†úÎ™©ÏùÑ ÏûêÎ¶ÖÎãàÎã§. ‚ú®‚ú®‚ú® */}
            <td className="contents-video-title">
                <a href={v.url || '#'} target="_blank" rel="noopener noreferrer">
                    {to2line(v.title || 'Ï†úÎ™© ÏóÜÏùå')}
                </a>
            </td>
            <td><span>{formatShortDate(v.uploadDate)}</span></td>
            <td>{v.length || 0} Î∂Ñ</td><td>{(v.views || 0).toLocaleString()}</td>
            <td>{(v.likes || 0).toLocaleString()}</td><td>{(v.comments || 0).toLocaleString()}</td>
        </tr>
    );

    if (loading) return <PageLayout title="ÏΩòÌÖêÏ∏† ÏÑ±Í≥º Î∂ÑÏÑù"><p className="contents-loading-message">ÏΩòÌÖêÏ∏† Îç∞Ïù¥ÌÑ∞Î•º Î∂ÑÏÑùÌïòÍ≥† ÏûàÏäµÎãàÎã§...</p></PageLayout>;
    if (error) return <PageLayout title="ÏΩòÌÖêÏ∏† ÏÑ±Í≥º Î∂ÑÏÑù"><p className="contents-error-message">{error}</p></PageLayout>;
    if (!statistics && allVideos.length === 0) return <PageLayout title="ÏΩòÌÖêÏ∏† ÏÑ±Í≥º Î∂ÑÏÑù"><p className="no-data-message">ÌëúÏãúÌï† ÏΩòÌÖêÏ∏† Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.</p></PageLayout>;

    return (
        <PageLayout title="ÏΩòÌÖêÏ∏† ÏÑ±Í≥º Î∂ÑÏÑù">
            <section className="page-section">
                <h2>ÏòÅÏÉÅÎ≥Ñ ÏÑ±Í≥º ÎπÑÍµê</h2>
                <div className="contents-chart-wrapper">
                    {top5PopularVideosForChart.length > 0 ? (
                        <Bar
                            data={{
                                labels: top5PopularVideosForChart.map((v) => v.title),
                                datasets: [
                                    { label: 'Ï°∞ÌöåÏàò', data: top5PopularVideosForChart.map((v) => v.views || 0), backgroundColor: 'rgba(75,192,192,0.6)', yAxisID: 'y' },
                                    { label: 'Ï¢ãÏïÑÏöî', data: top5PopularVideosForChart.map((v) => v.likes || 0), backgroundColor: 'rgba(153,102,255,0.6)', yAxisID: 'y2' },
                                    { label: 'ÎåìÍ∏Ä Ïàò', data: top5PopularVideosForChart.map((v) => v.comments || 0), backgroundColor: 'rgba(255,159,64,0.6)', yAxisID: 'y2' },
                                ],
                            }}
                            options={{
                                responsive: true, maintainAspectRatio: false,
                                plugins: { legend: { position: 'top' } },
                                scales: {
                                    x: { ticks: { callback: (value, index) => to2line(top5PopularVideosForChart[index].title) } },
                                    y: { type: 'logarithmic', position: 'left', title: { display: true, text: 'Ï°∞ÌöåÏàò (Î°úÍ∑∏ Ïä§ÏºÄÏùº)' } },
                                    y2: { position: 'right', title: { display: true, text: 'Ï¢ãÏïÑÏöî / ÎåìÍ∏Ä Ïàò' }, grid: { drawOnChartArea: false } }
                                }
                            }}
                        />
                    ) : <p className="no-chart-data-message">Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ Î∂ÄÏ°±</p>}
                </div>
                <table className="contents-video-table" style={{marginTop: '1.5rem'}}>
                    <thead><tr><th>Ï†úÎ™©</th><th>Ï°∞ÌöåÏàò</th><th>Ï¢ãÏïÑÏöî</th><th>ÎåìÍ∏Ä</th></tr></thead>
                    <tbody>
                        {top5PopularVideosForChart.map(v => (
                            <tr key={v.videoId}>
                                {/* ‚ú®‚ú®‚ú® to2line Ìï®ÏàòÎ•º Ï†ÅÏö©ÌïòÏó¨ Ï†úÎ™©ÏùÑ ÏûêÎ¶ÖÎãàÎã§. ‚ú®‚ú®‚ú® */}
                                <td className="contents-video-title">{to2line(v.title)}</td>
                                <td>{(v.views || 0).toLocaleString()}</td>
                                <td>{(v.likes || 0).toLocaleString()}</td>
                                <td>{(v.comments || 0).toLocaleString()}</td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </section>

            <div className="contents-grid contents-third">
                <section className="page-section">
                    <h2>ÏóÖÎ°úÎìú ÏöîÏùºÎ≥Ñ Ï°∞ÌöåÏàò</h2>
                    {dayOfWeekData.labels.length > 0 ? (
                        <ContentsMultiThinBarList labels={dayOfWeekData.labels} values={dayOfWeekData.values} percents={dayOfWeekData.percents} colors={Array(dayOfWeekData.labels.length).fill(barColorDay)} unit="Ìöå" />
                    ) : <p className="no-data-message">Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå</p>}
                </section>
                {/* ‚ú®‚ú®‚ú® ÏóÖÎ°úÎìú ÏãúÍ∞ÑÎåÄÎ≥Ñ Ï°∞ÌöåÏàò ÏÑπÏÖòÏùÄ Ïù¥Ï†ú ÏÉàÎ≤Ω, Ïò§Ï†Ñ, Ïò§ÌõÑÎ°ú Î∂ÑÎ•òÎêú ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞Î•º ÏÇ¨Ïö©Ìï©ÎãàÎã§. ‚ú®‚ú®‚ú® */}
                <section className="page-section">
                    <h2>ÏóÖÎ°úÎìú ÏãúÍ∞ÑÎåÄÎ≥Ñ Ï°∞ÌöåÏàò</h2>
                    {timeZoneData.labels.length > 0 ? (
                        <ContentsMultiThinBarList labels={timeZoneData.labels} values={timeZoneData.values} percents={timeZoneData.percents} colors={Array(timeZoneData.labels.length).fill(barColorTime)} unit="Ìöå" />
                    ) : <p className="no-data-message">Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå</p>}
                </section>
                <section className="page-section"><h2>ÏòÅÏÉÅ Í∏∏Ïù¥Î≥Ñ ÌèâÍ∑† Ï°∞ÌöåÏàò</h2>{lengthData.labels.length > 0 ? <ContentsMultiThinBarList labels={lengthData.labels} values={lengthData.values} percents={lengthData.percents} colors={Array(lengthData.labels.length).fill(barColorLen)} unit="Ìöå" /> : <p className="no-data-message">Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå</p>}</section>
            </div>

            <div className="contents-grid contents-half">
                {/* ‚ú®‚ú®‚ú® Ïú†ÏûÖÍ≤ΩÎ°ú Î∂ÑÏÑù Í∑∏ÎûòÌîÑÍ∞Ä Ìï≠ÏÉÅ 100%Î•º Ï±ÑÏö∞ÎèÑÎ°ù Îç∞Ïù¥ÌÑ∞Î•º ÏàòÏ†ïÌñàÏäµÎãàÎã§. ‚ú®‚ú®‚ú® */}
                <StackedBarSection title="Ïú†ÏûÖÍ≤ΩÎ°ú Î∂ÑÏÑù" data={trafficData} colors={trafficColors} unit="%" />
                <StackedBarSection title="Í∏∞Í∏∞ Ï†ëÏÜç ÌôòÍ≤Ω" data={deviceData} colors={deviceColors} unit="Ìöå" />
            </div>

            <div className="contents-grid contents-half">
                <section className="page-section">
                    <h2>ÏµúÏã† ÏòÅÏÉÅ Î™©Î°ù</h2>
                    <table className="contents-video-table">
                        <thead><tr><th>Ïç∏ÎÑ§Ïùº</th><th>Ï†úÎ™©</th><th>ÏóÖÎ°úÎìúÏùº</th><th>Í∏∏Ïù¥(Î∂Ñ)</th><th>Ï°∞ÌöåÏàò</th><th>Ï¢ãÏïÑÏöî</th><th>ÎåìÍ∏Ä</th></tr></thead>
                        <tbody>{videoLists.latest.length > 0 ? videoLists.latest.map(renderVideoRow) : <tr><td colSpan="7" className="no-data-message">ÏµúÏã† ÏòÅÏÉÅÏù¥ ÏóÜÏäµÎãàÎã§.</td></tr>}</tbody>
                    </table>
                </section>
                <section className="page-section">
                    <h2>Ïù∏Í∏∞ ÏòÅÏÉÅ Î™©Î°ù</h2>
                    <table className="contents-video-table">
                        <thead><tr><th>Ïç∏ÎÑ§Ïùº</th><th>Ï†úÎ™©</th><th>ÏóÖÎ°úÎìúÏùº</th><th>Í∏∏Ïù¥(Î∂Ñ)</th><th>Ï°∞ÌöåÏàò</th><th>Ï¢ãÏïÑÏöî</th><th>ÎåìÍ∏Ä</th></tr></thead>
                        <tbody>{videoLists.popular.length > 0 ? videoLists.popular.map(renderVideoRow) : <tr><td colSpan="7" className="no-data-message">Ïù∏Í∏∞ ÏòÅÏÉÅÏù¥ ÏóÜÏäµÎãàÎã§.</td></tr>}</tbody>
                    </table>
                </section>
            </div>
        </PageLayout>
    );
};

export default Contents;